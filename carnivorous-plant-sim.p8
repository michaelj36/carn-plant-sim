pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- Carnivorous Plant Simulator
-- v0.1  //endlessmike//

-- globals --
-------------

room = { x=0, y=0, idx=0, leftspawn=false, spawn={x=0,y=112}, init=nil, update=nil, draw=nil }
lvlidx_title = 31
lvlidx_home = 24
lvlidx_shop = 25
objects = {}
types = {}
freeze=0
shake=0
gs_level=0
delay_restart=0
sfx_timer=0
pause_player=false
flash_bg=false
music_timer=0

k_left=0
k_right=1
k_up=2
k_down=3
k_jump=4
k_twirl=5

msglib = {
	idle = "...",
	warningsign = {
		"!! caution !!#road repairs#in progress",
		"!! caution !!#someone made a#real mess ahead",
		"???#don't ask me.#i'm just a sign",
		"keep on#keepin' on",
		"what an inconvenient night#for a curse",
		"..."},
	martgreet = "welcome to the mart#buy something?##",
	martshop = {
		"bread#milk#eggs",
		"bread#milk#sara",
		"sara#joe#mike"}
}

-- entry point --
-----------------

function _init()
	title_screen()
end

function title_screen()
	frames=0
	deaths=0
	max_djump=1
	start_game=false
	start_game_flash=0
	--music(40,0,7)
	load_room(lvlidx_title)
end

function begin_game()
	frames=0
	seconds=0
	minutes=0
	music_timer=0
	gs_level=1
	start_game=false
	--music(0,0,7)
	room.leftspawn = false
	load_room(lvlidx_home)
end


-- effects --
-------------

clouds = {}
for i=0,2 do
	add(clouds,{
		x=rnd(128),
		y=rnd(42),
		spd=0.25+rnd(0.75),
		w=32+rnd(32)
	})
end

dead_particles = {}

-- player entity --
-------------------

player = {
	instance=nil,
	init=function(this) 
		player.instance=this
		this.p_jump=false
		this.p_twirl=false
		this.grace=0
		this.jbuffer=0
		this.twbuffer=0
		this.djump=max_djump
		this.hitbox = {x=1,y=2,w=6,h=6}
		this.spr_off=0
		this.was_on_ground=false
	end,
	update=function(this)
		if (pause_player) return
		
		local input = btn(k_right) and 1 or (btn(k_left) and -1 or 0)
		
		-- spikes collide
		if spikes_at(this.x+this.hitbox.x,this.y+this.hitbox.y,this.hitbox.w,this.hitbox.h,this.spd.x,this.spd.y) then
			kill_player(this) end
		 
		-- bottom death
		if this.y>128 then
			kill_player(this) end

		local on_ground=this.is_solid(0,1)
		local on_ice=this.is_ice(0,1)
		
		-- smoke particles
		if on_ground and not this.was_on_ground then
			init_object(smoke,this.x,this.y+4)
		end

		--register jump
		local jump = btn(k_jump) and not this.p_jump
		this.p_jump = btn(k_jump)
		if (jump) then
			this.jbuffer=4
		elseif this.jbuffer>0 then
		 this.jbuffer-=1
		end
		
		-- register twirl
		if not on_ground and btn(k_twirl) and not this.p_twirl and this.twbuffer <= 0 then
			this.twbuffer = 16
		end
		this.p_twirl = btn(k_twirl) and (this.twbuffer > 6 or on_ground)  -- allow 6 frame grace period
		
		if on_ground then
			this.grace=6
			if this.djump<max_djump then
			 psfx(54)
			 this.djump=max_djump
			end
		elseif this.grace > 0 then
			this.grace-=1
		end

		-- move
		local maxrun=1
		local accel=0.6
		local deccel=0.15
		
		if not on_ground then
			accel=0.4
		elseif on_ice then
			accel=0.05
			if input==(this.flip.x and -1 or 1) then
				accel=0.05
			end
		end
	
		if abs(this.spd.x) > maxrun then
			this.spd.x=appr(this.spd.x,sign(this.spd.x)*maxrun,deccel)
		else
			this.spd.x=appr(this.spd.x,input*maxrun,accel)
		end
		
		--facing
		if this.spd.x!=0 then
			this.flip.x=(this.spd.x<0)
		end

		-- gravity
		local maxfall=2
		local gravity=0.21

		if abs(this.spd.y) <= 0.15 then
			gravity*=0.5
		end
	
		-- wall slide
		if input!=0 and this.is_solid(input,0) and not this.is_ice(input,0) then
			maxfall=0.4
			if rnd(10)<2 then
				init_object(smoke,this.x+input*6,this.y)
			end
		end

		if not on_ground then
			this.spd.y=appr(this.spd.y,maxfall,gravity)
		end

		-- jump
		if this.jbuffer>0 then
			if this.grace>0 then
				-- normal jump
				psfx(1)
				this.jbuffer=0
				this.grace=0
				this.spd.y=-2
				init_object(smoke,this.x,this.y+4)
			else
				-- wall jump
				local wall_dir=(this.is_solid(-3,0) and -1 or this.is_solid(3,0) and 1 or 0)
				if wall_dir!=0 then
				psfx(2)
				this.jbuffer=0
				this.spd.y=-2
				this.spd.x=-wall_dir*(maxrun+1)
				if not this.is_ice(wall_dir*3,0) then
					init_object(smoke,this.x+wall_dir*6,this.y)
					end
				end
			end
			this.twbuffer = 0
		elseif this.twbuffer > 0 then
			if this.twbuffer == 16 then
				psfx(3)
			end
			if this.twbuffer > 10 and this.spd.y > 0.1 then
				-- stall falling
				this.spd.y = 0.1
			end
			this.twbuffer -= 1
		end
		
		-- animation
		this.hitbox.y=2
		this.hitbox.h=6
		this.spr_off+=0.25
		if not on_ground then
			if this.is_solid(input,0) then
				this.spr=5
			else
				this.spr=(this.twbuffer > 0 and 0 == band(1,this.spr_off%4)) and 9 or 3
			end
		elseif btn(k_down) then
			this.hitbox.y=4
			this.hitbox.h=4
			this.spr=6
		elseif (this.spd.x==0) or (input==0) then
			this.spr=btn(k_up) and 7 or 1
		elseif btn(k_up) then
			this.spr=7+this.spr_off%2
		else
			this.spr=1+this.spr_off%4
		end
		
		-- next level
		if this.x>125 then 
			next_room(1) 
		elseif this.x<-5 then
			next_room(-1)
		end
		
		-- was on the ground
		this.was_on_ground=on_ground
		
	end, --<end update loop
	
	draw=function(this)
		spr(this.spr,this.x,this.y,1,1,this.flip.x,this.flip.y)		
	end
}

psfx=function(num)
 if sfx_timer<=0 then
  sfx(num)
 end
end

player_spawn = {
	tile=1,
	init=function(this)
		local direction = room.leftspawn and 1 or -1
		sfx(4)
		this.spr=3
		this.target= {x=this.x,y=this.y}
		this.x= room.spawn.x - (8*direction)
		this.spd.x= 4*direction
		this.flip.x = not room.leftspawn
		this.state=0
		this.delay=2
		this.solids=false
	end,
	update=function(this)
		if this.state==0 then
			this.spd.x = appr(this.spd.x, 0, 0.5)
			--if abs(this.spd.x)<0.01 and this.delay>0 then
			--	this.spd.x=0
			--	this.delay-=1
			--end
			if abs(this.spd.x)<0.01 then
				this.x=this.target.x
				this.spd = {x=0,y=0}
				this.state=2
				this.delay=5
				shake=5
				init_object(smoke,this.x + (room.leftspawn and 4 or -4),this.y)
				sfx(5)
			end
		elseif this.state==2 then
			this.delay-=1
			this.spr=6
			if this.delay<0 then
				destroy_object(this)
				init_object(player,this.x,this.y).flip.x = this.flip.x
			end
		end
	end,
	draw=function(this)
		spr(this.spr,this.x,this.y,1,1,this.flip.x,this.flip.y)
	end
}

smoke={
	init=function(this)
		this.spr=29
		this.spd.y=-0.1
		this.spd.x=0.3+rnd(0.2)
		this.x+=-1+rnd(2)
		this.y+=-1+rnd(2)
		this.flip.x=maybe()
		this.flip.y=maybe()
		this.solids=false
	end,
	update=function(this)
		this.spr+=0.2
		if this.spr>=32 then
			destroy_object(this)
		end
	end
}

platform={
	init=function(this)
		this.x-=4
		this.solids=false
		this.hitbox.w=16
		this.hitbox.y=1
		this.hitbox.h=7
		this.last=this.x
	end,
	update=function(this)
		this.spd.x=this.dir*0.65
		if this.x<-16 then this.x=128
		elseif this.x>128 then this.x=-16 end
		if not this.check(player,0,0) then
			local hit=this.collide(player,0,-1)
			if hit~=nil then
				hit.move_x(this.x-this.last,1)
			end
		end
		this.last=this.x
	end,
	draw=function(this)
		spr(11,this.x,this.y-1)
		spr(12,this.x+8,this.y-1)
	end
}

message={
	tile=0,
	create=function(_text, _trigger, v)
		local obj = init_object(message, 8, 20)
		obj.index=0
		obj.last=0
		obj.text=_text
		obj.trigger=_trigger
		obj.voice=v or 6
		obj.hitbox.x=obj.x-2
		obj.hitbox.y=obj.y-2
		obj.hitbox.w=114
		for i=1, #_text do 
			if sub(_text,i,i)=="#" then obj.hitbox.h+=7 end
		end
		return obj
	end,
	draw=function(this)
		if this.trigger==nil or this.trigger.check(player,0,0) then
			if this.index<#this.text then
			 this.index+=0.5
				if this.index>=this.last+1 then
				 this.last+=1
				 sfx(this.voice)
				end
			end
			this.off={x=this.x,y=this.y}
			rectfill(this.hitbox.x,this.hitbox.y,
					this.hitbox.x+this.hitbox.w,this.hitbox.y+this.hitbox.h,
					0)
			for i=1,this.index do
				if sub(this.text,i,i)~="#" then
					print(sub(this.text,i,i),this.off.x,this.off.y,7)
					this.off.x+=5
				else
					this.off.x=8
					this.off.y+=7
				end
			end
		else
			this.index=0
			this.last=0
		end
	end
}

orb={
	init=function(this)
		this.spd.y=-4
		this.solids=false
		this.particles={}
	end,
	draw=function(this)
		this.spd.y=appr(this.spd.y,0,0.5)
		local hit=this.collide(player,0,0)
		if this.spd.y==0 and hit~=nil then
		 music_timer=45
			sfx(51)
			freeze=10
			shake=10
			destroy_object(this)
			max_djump=2
			hit.djump=2
		end
		
		spr(102,this.x,this.y)
		local off=frames/30
		for i=0,7 do
			circfill(this.x+4+cos(off+i/8)*8,this.y+4+sin(off+i/8)*8,1,7)
		end
	end
}

sign_post = {
	tile=48,
	init=function(this)
		message.create(msglib.warningsign[mid(1,gs_level,6)], this)
	end,
	draw=function(this)
		--don't draw sprite here
	end
}
add(types, sign_post)

pavement = {
	tile = 17,
	init=function(this)
		this.sparkle = { t=0, x=0, y=0 }
	end,
	update=function(this)
		if this.sparkle.t <= 0 and rnd(5) < (0.01 * (1 + (gs_level - 1)/2)) then
			this.sparkle.t = rnd(11)
			this.sparkle.x = flr(rnd(8))
			this.sparkle.y = flr(rnd(8))
		else
			this.sparkle.t -= 0.25
		end
	end,
	draw=function(this)
		if this.sparkle.t > 0 then
			pset(this.x + this.sparkle.x, this.y + this.sparkle.y, 5 + flr(this.sparkle.t))
		end
	end
}
add(types, pavement)

flowey = {
	tile = 24,
	init=function(this)
		this.spr = 26
		this.spr_off = 0
		this.level = gs_level
		message.create(msglib.idle, this)
		this.test_lvlup_delay=0
	end,
	update=function(this)
		this.spr_off += 0.01
		this.spr = 26 + this.spr_off%2
		if this.test_lvlup_delay==0 then
			if this.check(player,0,0) then
				gs_level = gs_level%6 + 1
				this.test_lvlup_delay = 60
			end
		else
			this.test_lvlup_delay-=1
		end
		this.level = gs_level
	end,
	draw=function(this)
		--pot
		spr(24, this.x, this.y)
		--stem
		for i=1,this.level do
			local stemy = this.y - ((1 + flr(i/2)) * 8)
			sspr(72, 8, 2, 8, this.x + 3, stemy)
			sspr(76, 8, 4, 6, this.x, stemy, 4, 6, true, false)
			if 0==(i%2) then
				sspr(76, 8, 4, 6, this.x + 5, stemy + 2)
			end
		end
		--head
		spr(this.spr, this.x, this.y - ((2 + flr(this.level/2)) * 8))
	end
}

shopkeep = {
	tile = 56,
	init=function(this)
		this.prompt = nil
	end,
	update=function(this)
		if this.prompt == nil then
			if this.check(player,-24,0) then
				this.prompt = message.create(
						msglib.martgreet..msglib.martshop[mid(1,gs_level,3)], 
						nil)
				pause_player = true
				player.instance.spd.x=0
			end
		else
			if btn(k_jump) then
				prompt = nil
				pause_player = false
				player.instance.flip.x=true
				next_room(-1)
			end
		end
	end,
	draw=function(this)
		--shop keep
		spr(this.spr, this.x, this.y)
		--desk
		spr(54, this.x-4, this.y)
	end
}
add(types, shopkeep)

press_start = {
	tile = 64,
	init=function(this)
		this.p_jump = false
		this.p_twirl = false
		this.x += 4  --shift to center on screen
	end,
	update=function(this)
		if not start_game then
			this.p_jump = btn(k_jump)
			this.p_twirl = btn(k_twirl)
			if this.p_jump and this.p_twirl then
				music(-1)
				start_game_flash=50
				start_game=true
				sfx(38)
			end
		end
		if start_game then
			start_game_flash-=1
			if start_game_flash<=-30 then
				begin_game()
			end
		end
	end,
	draw=function(this)
		if start_game_flash>10 then
			if frames%10<5 then
				pal(5,4)
				pal(9,4)
			else
				pal(5,9)
			end
		elseif start_game then
			return
		end
		
		print("jump", this.x-20, this.y+3, this.p_jump and 9 or 5)
		print("twirl", this.x+12, this.y+3, this.p_twirl and 9 or 5)
		print("press",this.x-6,this.y-8,5)
		spr(this.spr,this.x,this.y)
	end
}
add(types, press_start)


-- object functions --
-----------------------

function init_object(type,x,y)
	local obj = {}
	obj.type = type
	obj.collideable=true
	obj.solids=true

	obj.spr = type.tile
	obj.flip = {x=false,y=false}

	obj.x = x
	obj.y = y
	obj.hitbox = { x=0,y=0,w=8,h=8 }

	obj.spd = {x=0,y=0}
	obj.rem = {x=0,y=0}

	obj.is_solid=function(ox,oy)
		if oy>0 and not obj.check(platform,ox,0) and obj.check(platform,ox,oy) then
			return true
		end
		return solid_at(obj.x+obj.hitbox.x+ox,obj.y+obj.hitbox.y+oy,obj.hitbox.w,obj.hitbox.h)
		 or obj.check(fall_floor,ox,oy)
		 or obj.check(fake_wall,ox,oy)
	end
	
	obj.is_ice=function(ox,oy)
		return ice_at(obj.x+obj.hitbox.x+ox,obj.y+obj.hitbox.y+oy,obj.hitbox.w,obj.hitbox.h)
	end
	
	obj.collide=function(type,ox,oy)
		local other
		for i=1,count(objects) do
			other=objects[i]
			if other ~=nil and other.type == type and other != obj and other.collideable and
				other.x+other.hitbox.x+other.hitbox.w > obj.x+obj.hitbox.x+ox and 
				other.y+other.hitbox.y+other.hitbox.h > obj.y+obj.hitbox.y+oy and
				other.x+other.hitbox.x < obj.x+obj.hitbox.x+obj.hitbox.w+ox and 
				other.y+other.hitbox.y < obj.y+obj.hitbox.y+obj.hitbox.h+oy then
				return other
			end
		end
		return nil
	end
	
	obj.check=function(type,ox,oy)
		return obj.collide(type,ox,oy) ~=nil
	end
	
	obj.move=function(ox,oy)
		local amount
		-- [x] get move amount
 	obj.rem.x += ox
		amount = flr(obj.rem.x + 0.5)
		obj.rem.x -= amount
		obj.move_x(amount,0)
		
		-- [y] get move amount
		obj.rem.y += oy
		amount = flr(obj.rem.y + 0.5)
		obj.rem.y -= amount
		obj.move_y(amount)
	end
	
	obj.move_x=function(amount,start)
		if obj.solids then
			local step = sign(amount)
			for i=start,abs(amount) do
				if not obj.is_solid(step,0) then
					obj.x += step
				else
					obj.spd.x = 0
					obj.rem.x = 0
					break
				end
			end
		else
			obj.x += amount
		end
	end
	
	obj.move_y=function(amount)
		if obj.solids then
			local step = sign(amount)
			for i=0,abs(amount) do
	 		if not obj.is_solid(0,step) then
					obj.y += step
				else
					obj.spd.y = 0
					obj.rem.y = 0
					break
				end
			end
		else
			obj.y += amount
		end
	end

	add(objects,obj)
	if obj.type.init~=nil then
		obj.type.init(obj)
	end
	return obj
end

function destroy_object(obj)
	del(objects,obj)
end

function kill_player(obj)
	sfx_timer=12
	sfx(0)
	deaths+=1
	shake=10
	destroy_object(obj)
	player.instance=nil
	dead_particles={}
	for dir=0,7 do
		local angle=(dir/8)
		add(dead_particles,{
			x=obj.x+4,
			y=obj.y+4,
			t=10,
			spd={
				x=sin(angle)*3,
				y=cos(angle)*3
			}
		})
		restart_room()
	end
end

-- room functions --
--------------------

function restart_room()
	will_restart=true
	delay_restart=15
end

function next_room(path)
 --if room.x==2 and room.y==1 then
  --music(30,500,7)
 --elseif room.x==3 and room.y==1 then
  --music(20,500,7)
 --elseif room.x==4 and room.y==2 then
  --music(30,500,7)
 --elseif room.x==5 and room.y==3 then
  --music(30,500,7)
 --end

	local r = room.idx
	if r==lvlidx_home then
		r = (gs_level - 1) * 4
	elseif r==lvlidx_shop then
		r = (gs_level - 1) * 4 + 3
	elseif (r%4)==0 and path<0 then
		r = lvlidx_home
	elseif (r%4)==3 and path>0 then
		r = lvlidx_shop
	else
		r += path
	end
	
	room.leftspawn = (path>=0)
	load_room(r)
end

function load_room(idx)
	has_key=false

	--remove existing objects
	--foreach(objects,destroy_object)
	for obj in all (objects) do
		if obj.type ~= player then
			destroy_object(obj)
		end
	end

	--current room
	room.idx = idx
	room.x = idx%8
	room.y = flr(idx/8)

	-- entities
	for tx=0,15 do
		for ty=0,15 do
			local tile = mget(room.x*16+tx,room.y*16+ty);
			if tile==11 then
				init_object(platform,tx*8,ty*8).dir=-1
			elseif tile==12 then
				init_object(platform,tx*8,ty*8).dir=1
			elseif (tile==1 and room.leftspawn) or (tile==7 and not room.leftspawn) then
				room.spawn={x=tx*8, y=ty*8}
			else
				foreach(types, 
				function(type) 
					if type.tile == tile then
						init_object(type,tx*8,ty*8) 
					end 
				end)
			end
		end
	end
	
	if room.idx == lvlidx_home then
		init_object(flowey, 24, 112)
	end
	
	if room.idx ~= lvlidx_title then
		if player.instance ~= nil then
			player.instance.spd.x = 0
			player.instance.x = room.spawn.x
			if player.instance.y >= room.spawn.y then
				player.instance.y = room.spawn.y
				player.instance.spd.y = 0
			end
		else
			init_object(player_spawn, room.spawn.x + (8 * (room.leftspawn and 1 or -1)), room.spawn.y)
		end
	end
end

-- update function --
-----------------------

function _update()
	frames=((frames+1)%30)
	if frames==0 and room.idx<30 then
		seconds=((seconds+1)%60)
		if seconds==0 then
			minutes+=1
		end
	end
	
	if music_timer>0 then
	 music_timer-=1
	 if music_timer<=0 then
	  music(10,0,7)
	 end
	end
	
	if sfx_timer>0 then
	 sfx_timer-=1
	end
	
	-- cancel if freeze
	if freeze>0 then freeze-=1 return end

	-- screenshake
	if shake>0 then
		shake-=1
		camera()
		if shake>0 then
			camera(-2+rnd(5),-2+rnd(5))
		end
	end
	
	-- restart (soon)
	if will_restart and delay_restart>0 then
		delay_restart-=1
		if delay_restart<=0 then
			will_restart=false
			load_room(room.idx)
		end
	end

	-- update each object
	foreach(objects,function(obj)
		obj.move(obj.spd.x,obj.spd.y)
		if obj.type.update~=nil then
			obj.type.update(obj) 
		end
	end)
	
end

-- drawing functions --
-----------------------
function _draw()
	if freeze>0 then return end
	
	-- reset all palette values
	pal()
	
	-- start game flash
	if start_game then
		local c=10
		if start_game_flash>10 then
			if frames%10<5 then
				c=7
			end
		elseif start_game_flash>5 then
			c=12
		elseif start_game_flash>0 then
			c=1
		else 
			c=0
		end
		if c<10 then
			pal(6,c)
			pal(12,c)
			pal(13,c)
			pal(5,c)
			pal(1,c)
			pal(7,c)
		end
	end

	-- clear screen
	local bg_col = 12
	if flash_bg then
		bg_col = frames/5
	elseif room.idx == lvlidx_shop then
		bg_col = 0
	elseif gs_level > 4 then
		bg_col = 1
	elseif gs_level > 2 then
		bg_col = 13
	end
	rectfill(0,0,128,128,bg_col)
	
	-- clouds
	if room.idx ~= lvlidx_title and room.idx ~= lvlidx_shop then
		foreach(clouds, function(c)
			c.x += c.spd
			rectfill(c.x,c.y,c.x+c.w,c.y+4+(1-c.w/64)*12,7)
			if c.x > 128 then
				c.x = -c.w
				c.y=rnd(34)
			end
		end)
	end

	-- draw bg terrain
	--if room.idx < lvlidx_home then
	--	map(32 + (4 * (room.idx%4)), 48,
	--		(player.instance==nil and 0 or (-0.25 * mid(0,player.instance.x,127))), 0,
	--		20, 16,
	--		4)
	--end
	map(room.x * 16,room.y * 16,0,0,16,16,4)

	-- platforms/big chest
	foreach(objects, function(o)
		if o.type==platform or o.type==big_chest then
			draw_object(o)
		end
	end)

	-- draw terrain
	map(room.x*16,room.y*16,0,0,16,16,2)
	
	-- draw objects
	foreach(objects, function(o)
		if o.type~=platform and o.type~=big_chest then
			draw_object(o)
		end
	end)
	
	-- draw fg terrain
	map(room.x * 16,room.y * 16,0,0,16,16,8)
	
	-- dead particles
	foreach(dead_particles, function(p)
		p.x += p.spd.x
		p.y += p.spd.y
		p.t -=1
		if p.t <= 0 then del(dead_particles,p) end
		rectfill(p.x-p.t/5,p.y-p.t/5,p.x+p.t/5,p.y+p.t/5,14+p.t%2)
	end)
	
	-- draw outside of the screen for screenshake
	rectfill(-5,-5,-1,133,0)
	rectfill(-5,-5,133,-1,0)
	rectfill(-5,128,133,133,0)
	rectfill(128,-5,133,133,0)
	
end

function draw_object(obj)

	if obj.type.draw ~=nil then
		obj.type.draw(obj)
	elseif obj.spr > 0 then
		spr(obj.spr,obj.x,obj.y,1,1,obj.flip.x,obj.flip.y)
	end

end

function draw_time(x,y)

	local s=seconds
	local m=minutes%60
	local h=flr(minutes/60)
	
	rectfill(x,y,x+32,y+6,0)
	print((h<10 and "0"..h or h)..":"..(m<10 and "0"..m or m)..":"..(s<10 and "0"..s or s),x+1,y+1,7)

end

-- helper functions --
----------------------

function appr(val,target,amount)
 return val > target 
 	and max(val - amount, target) 
 	or min(val + amount, target)
end

function sign(v)
	return v>0 and 1 or
			v<0 and -1 or 0
end

function maybe()
	return rnd(1)<0.5
end

function solid_at(x,y,w,h)
 return tile_flag_at(x,y,w,h,0)
end

function ice_at(x,y,w,h)
 return tile_flag_at(x,y,w,h,4)
end

function tile_flag_at(x,y,w,h,flag)
 for i=max(0,flr(x/8)),min(15,(x+w-1)/8) do
 	for j=max(0,flr(y/8)),min(15,(y+h-1)/8) do
 		if fget(tile_at(i,j),flag) then
 			return true
 		end
 	end
 end
	return false
end

function tile_at(x,y)
 return mget(room.x * 16 + x, room.y * 16 + y)
end

function spikes_at(x,y,w,h,xspd,yspd)
	for i=max(0,flr(x/8)),min(15,(x+w-1)/8) do
		for j=max(0,flr(y/8)),min(15,(y+h-1)/8) do
			local tile=tile_at(i,j)
			if (tile==32 and collide_at(i*8,j*8,8,8,x,y,w,h))
				or (tile==33 and collide_at(i*8,j*8,8,3,x,y,w,h)) then
				return true
				
			--if fget(tile_at(i,j), 5) then
			--	if ((y+h-1)%8>=6 or y+h==j*8+8) and yspd>=0 then
			--		return true
			--	elseif y%8<=2 and yspd<=0 then
			--		return true
			--	elseif x%8<=2 and xspd<=0 then
			--		return true
			--	elseif ((x+w-1)%8>=6 or x+w==i*8+8) and xspd>=0 then
			--		return true
			--	end
			end
		end
	end
	return false
end

function collide_at(x1,y1,w1,h1, x2,y2,w2,h2)
	return x2+w2 > x1 and 
			y2+h2 > y1 and
			x2 < x1+w1 and 
			y2 < y1+h1
end

__gfx__
00000000002220000022200000222000000000000022200000000000022220000222200000222000000000000000000000000000000000000000000000000000
0000000002222200022222000222220000222000002222200000000002cfcf0002cfcf0000222200000000000077666677066660000000000000000000000000
0070070002fcfc0002fcfc0002fcfc000222222000cfcf2000222000f2ffff0ff2ffff0f02222200000000000677777777677760000000000000000000000000
0007700022ffff0022ffff0022ffff0002fcfc0000ffff2202222220077878700778787002222200000000000677777777777776000000000000000000000000
0007700007787870f77878700778787022ffff000787877f02fcfc200277870002778700f722277f000000006677777777777770000000000000000000000000
007007000f7787f0007787f00f77870f077878700f78770022ffff00021111000211110000727700000000006777777777777776000000000000000000000000
000000000011110000111100001111000f7787f000111100f777877f001001000001100000111100000000006677777777777776000000000000000000000000
00000000001001000100100000010010001111000001001001111110001001000010100001001000000000000666666666666660000000000000000000000000
4fffffff555555550666666666666660000000066000000066666666666666660003b0003b00000b000bbb00000000003b00000b000000000000000000000000
44444444555555550777777777777770000000666600000066666666666666660003b0003b000bbb03bbbb30000bbb003b000bbb000000000000000000000000
fff4ffff555555557777777777777777000006666660000066666666666665660003b0003b00bb3b0bbbbbbb03bbbb303b00bb3b000000000000000000660000
fff4ffff555555557777777777777777000066666666000066666666666666660003b0003b00b3b33bb878870bbbbbbb3b00b3b3000000000006000000006000
4444444455555555066666666666666000066666666660006666666666666666088888803b003bb33b8888803bb37bb73b003bb3000770000000600000000000
fffffff455555555077777777777777000666666666666006666666666766666088888803b00033003b878873bbb73373b000330007777000067760006000060
fffffff455555555777777777777777706666666666666606666666666666666008888003b00000000bbbbbb03bbbbbb3b000000000707000000000000000000
4444444455555555777777777777777766666666666666666666666666666666008888003b00000000033b0000033b003b000000000000000000000000000000
60060006560560560000000000000000000000006666666611111111111111111111111111111111000000000000000000000000000000000000000000000000
06065060060060060000000000000000000000006777777711111111111111111111111116611661000000000000000000000000000000000000000000000000
00665600060060060000000000000000000000006777777711155555166666611111111116611661000000000000000000000000000000000000000000000000
05556666000000000000000000000000000000006777777711156565166666611111111111111111000000000000000000000000000000000000000000000000
66665550000000000000000000000000000000006777777711156565166666611111111111111111000000000000000000000000000000000000000000000000
00656600000000000000000000000000000000006777777711156565166666611111111116611661000000000000000000000000000000000000000000000000
06056060000000000000000000000000000000006777777711155555111111111111111116611661000000000000000000000000000000000000000000000000
60006006000000000000000000000000000000006777777711155555111111111111111111111111000000000000000000000000000000000000000000000000
00044000888f888ff88888ff888888ff8888888fffffffff00000000005f5f00005f5f0000000000000000000000000000000000000000000000000000000000
444444448788878f8877788f8777788f8777778ff4fff4ff0000000000f44f0000f44f0000000000000000000000000000000000000000000000000000000000
400040048778778f8778778f8788878f8787878fffffffff0000a000011111100118811000000000000000000000000000000000000000000000000000000000
444444448777778f8788878f8788878f8887888ffff4fff400044444011191100118811000000000000000000000000000000000000000000000000000000000
404000048787878f8777778f877778ffff878fffffffffff000044440f1111f00f1811f000000000000000000000000000000000000000000000000000000000
444444448788878f8788878f8788788fff878ffff4fff4ff00004444001111000011110000000000000000000000000000000000000000000000000000000000
00044000878f878f878f878f8788778fff878fffffffffff00004444001010000010100000000000000000000000000000000000000000000000000000000000
00044000888f888f888f888f8888888fff888ffffff4fff400004444001010000010100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033
00000000000011110211000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043
10000000000011021100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053
11110000111102110000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11021102110211000000000000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000300000000000000000000000070100000000000000000000000000000701000000000000000000000000000007010000000000000000200000000000070
11110011001100000000000000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111000011111111111111111111111111111111111111111111111111111111111111111111111111111111
00000000004151000000000000000000535353535353535353535353535353530000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020202020202020202020202020202
00000000417171510000000000000000530000000000000000000000000000530000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
00000041717171715100000000000000530000000000000000000000000000530000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
00004171717171717151000000000000530000000000000000000000000000530000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000009000500000000002
00417171717171717171616161615100530000000000000000000000000000530000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
00217171717171717171717171713100530000000000535353535353000000530000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000070000000000030000002
00217171717171717171717171713100530000000000530000000053000000530000000082828200000000000000000000000000000000000082728272827200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000600000000000000000400002
00217171717171717171717171713100530000000000530000000053000000530000008272827282000082828200000000000000828282000082828282828200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
00217171717171717171717171713100530000000000000000000053000000530000008282828282000092929200920000920000928292000082728272827200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
00217171717171717171717171713100530000000000000000000053000000530000008272827282000082828200920000920000828282000082828282828200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
00217171717171717171717171713100530000000000000000000053000000530000008282828282000092929200827171820000928292000082728272827200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
00217171717171717171717171713100530000000000000000000053000000530000008272827282000082828200717171710000828282000082828282828200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
00217171717171717171717171713100535353535353535353535353000000530000008282828282000062827171717171717171827282000082727282727200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000040000000000000002
00217171717171717171717171710000000000000000000000000000000000530000007272628272717171717171717171717171717171717182826262828200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
00217171717171717171717171710070100000000000000000000083000000537171717171717171717171717171717171717171717171717171717171717171
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002
11110101010101010101010101011111525252525252525252525252525252530000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020202020202020202020202020202
__gff__
0000000000000000000000000000000003030909030303040000202000000000222200000003040404040000000000000403030303030800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003300000000000011111100000000000000000000000000000000000000000000000000000000001111110000000000000000000000000000000000000000000033
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003400000011000020202011000000000000000000000000000000000000000000000000001111112020201100000000000000000000000000000000000000000034
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500000000001120202000000000000000000000000000000000000000000000000000000000002020200000000000000000000000000000000000000000000035
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001120202000000000000000000000000000000000000000000000000000000000002020200000000000000000000000000000000000000000000000
0100300000000000000000000000000701000000000000000000000000000007010000000000000000000000000000070100000000000000200000000000000701003000110020202000000011000007010000110000000000000000000000070100000011002121210000001100000701000000000000002000000000000007
1111111111111111111111111111111111111111111100001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111120202011111111111111111111112020201111111111111111111111111111111111110000111111111111111111111111111111111111111111
0000000000000000000000000000002020200000000000000000000000002020202000000000000000000000000000000000000000000000000000000000003500000000000000000020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000002020000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003500001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003500001100002020000020111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000001111000000001111000011110000000007010000000000000000000000000000000000000000000000000000000000003500001100001120000020111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000001111000020111111111111111111111111110000000000000000000000000000000000000000000000000000000000003500001100001120000020111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000001111000000110000000000000000000011111100000000000000000000000000000000000000000000000000000000003500001100001120000020201111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000001111000000111111110011000000000011111100000000000000000000000000000000000000000000000000000000003500001100001120000000202011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
00000000000000000000000000000011110000000011201100000000110000111120000000000000000000000c0c00000000000000000000000000000000003500001100001120000000002020110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000000000000000000000000001111000000000011110000000000000011110000000000000000000000000000000000000000000000000000000000003100001100001120200000000020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031
000000000000000000000000000000111120000000000011000000111111111111000c0c0000000000000000000000000000000000000000000000000000003200001100001100202000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032
0000000000000000000000000000001111200000000011110011111111111111110000000000000000000000000000000000000000000000000000000000003300001100001100002020000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033
0000000000001111201100000000001111000000001100000000112011111111110000000000000c0c000000000000000000000000000000000000000000003400001100001100000020200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034
0000000000001120110000000000201111000000000000000000111111111111110000000000000000000000000000070100000000000000000000000000003500001100001100000020110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035
0000000011112011000000000000000000000000000000000011112020111111110000000000000000000000000000111100000000000000000000111111000701000000001100000000110000000007010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100002011201100000000000000000701000000003000000011202020201120200000000000000000000000000000201111111100000000000000202011111111000000000000000000000000000011111100000000000000000000000000070100000000000000000000000000000701000000000000000000000000000007
1111111100110000000000000000111111110000111100001111111111111111111111111111111111111111111111111111110000000000000000000000001111110000000b0000000b0000000b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
__sfx__
010a00002d55325553000010d0530d053000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010500001c6111f031230310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010500001061113611230310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0105000023510285102b5102f03028510235101750000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
010a0000015031c531000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010a00001003300000100331001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010a00001c61500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010500001d61128615000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 40424344

